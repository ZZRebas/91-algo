'''
对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。

给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。

示例 1：

输入：A = [1,2,0,0], K = 34
输出：[1,2,3,4]
解释：1200 + 34 = 1234
示例 2：

输入：A = [2,7,4], K = 181
输出：[4,5,5]
解释：274 + 181 = 455
示例 3：

输入：A = [2,1,5], K = 806
输出：[1,0,2,1]
解释：215 + 806 = 1021
示例 4：

输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1
输出：[1,0,0,0,0,0,0,0,0,0,0]
解释：9999999999 + 1 = 10000000000
 
提示：

1 <= A.length <= 10000
0 <= A[i] <= 9
0 <= K <= 10000
如果 A.length > 1，那么 A[0] != 0

思路
遍历数组A，取出每个元素转换为字符串，再拼在一起，然后转为int整形，再与整数K相加，得出的结果再转为字符串，再遍历每一个元素输出到新的数组中。
'''

#方法1
def fun(A,K):
    a=''.join(str(x) for x in A)
    b=int(a)+K
    out=[]
    for i in str(b):
        out.append(int(i))
    print(out)

A = [1,2,0,0]
K = 34
fun(A,K)    #[1, 2, 3, 4]
fun(A = [2,7,4], K = 181)   #[4, 5, 5]
fun(A = [2,1,5], K = 806)   #[1, 0, 2, 1]
fun(A = [9,9,9,9,9,9,9,9,9,9], K = 1)   #[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

方法2
class Solution():
    def AddToArrayFrom(self,A:list,K:int) -> list:  #指定函数输入参数类型及返回类型，几乎没用
        carry=0
        for i in range(len(A))[::-1]:
            variable=A[i]
            A[i]=(A[i]+K%10+carry)%10
            carry=(variable+K%10+carry)//10     #注意，这里不能直接用A[i],因为A[i]已经在上一步中改变，所以用用variable保留每次循环开始的A[i]
            # A[i], carry = (A[i]+K%10+carry)%10, (A[i]+K%10+carry)//10   #或者上面2行代码写在一行也可以，就可以省略中间保留的variable=A[i]
            K=K//10

        #如果加完后还有进位，或者K的位数比A多，如A=[2,3],K=77; A=[2,3],K=1377
        B=[]
        if carry !=0 or K !=0:
            carry=carry+K   #让多的进位和剩余的K先加起来，统一处理
            while carry:
                B=[carry%10]+B
                carry//=10
        return B+A

A = [2,7,4]
K = 181
res=Solution()
print(res.AddToArrayFrom(A,K))  #[4, 5, 5]

